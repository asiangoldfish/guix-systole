From 13b8b2f6b1f00a4b77facce50b2896a6c924db21 Mon Sep 17 00:00:00 2001
From: Rafael Palomar <rafael.palomar@ous-research.no>
Date: Tue, 6 May 2025 10:15:52 +0200
Subject: [PATCH 7/8] COMP: Scope CPack blocks

Co-authored-by: Khai Duong <duongkhai@gmail.com>
---
 CMake/SlicerCPack.cmake | 220 ++++++++++++++++++++--------------------
 1 file changed, 111 insertions(+), 109 deletions(-)

diff --git a/CMake/SlicerCPack.cmake b/CMake/SlicerCPack.cmake
index 507852cbf1..699d96cedd 100644
--- a/CMake/SlicerCPack.cmake
+++ b/CMake/SlicerCPack.cmake
@@ -131,128 +131,130 @@ if(NOT "${CTK_DIR}" STREQUAL "" AND EXISTS "${CTK_DIR}/CTK-build/CMakeCache.txt"
   set(CPACK_INSTALL_CMAKE_PROJECTS "${CPACK_INSTALL_CMAKE_PROJECTS};${CTK_DIR}/CTK-build;CTK;RuntimePlugins;/")
 endif()
 
-if(NOT APPLE)
-  if(NOT Slicer_USE_SYSTEM_QT)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallQt.cmake)
-  endif()
-  if(Slicer_BUILD_DICOM_SUPPORT AND NOT Slicer_USE_SYSTEM_DCMTK)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallDCMTKLibs.cmake)
-  endif()
-  if(Slicer_USE_PYTHONQT AND NOT Slicer_USE_SYSTEM_CTK)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallPythonQt.cmake)
-  endif()
-  if(Slicer_USE_PYTHONQT_WITH_OPENSSL AND NOT Slicer_USE_SYSTEM_OpenSSL)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallOpenSSL.cmake)
-  endif()
-  if(Slicer_USE_TBB AND NOT Slicer_USE_SYSTEM_TBB)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallTBB.cmake)
-  endif()
-  if(Slicer_USE_QtTesting AND NOT Slicer_USE_SYSTEM_CTK)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallQtTesting.cmake)
-  endif()
-  if(NOT Slicer_USE_SYSTEM_LibArchive)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallLibArchive.cmake)
-  endif()
-  # XXX Note that installation of OpenMP libraries is available only
-  #     when using msvc compiler.
-  if(NOT DEFINED CMAKE_INSTALL_OPENMP_LIBRARIES)
-    set(CMAKE_INSTALL_OPENMP_LIBRARIES ON)
-  endif()
-  set(CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT "RuntimeLibraries")
-  include(InstallRequiredSystemLibraries)
+if(Slicer_SUPERBUILD)
+  if(NOT APPLE)
+    if(NOT Slicer_USE_SYSTEM_QT)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallQt.cmake)
+    endif()
+    if(Slicer_BUILD_DICOM_SUPPORT AND NOT Slicer_USE_SYSTEM_DCMTK)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallDCMTKLibs.cmake)
+    endif()
+    if(Slicer_USE_PYTHONQT AND NOT Slicer_USE_SYSTEM_CTK)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallPythonQt.cmake)
+    endif()
+    if(Slicer_USE_PYTHONQT_WITH_OPENSSL AND NOT Slicer_USE_SYSTEM_OpenSSL)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallOpenSSL.cmake)
+    endif()
+    if(Slicer_USE_TBB AND NOT Slicer_USE_SYSTEM_TBB)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallTBB.cmake)
+    endif()
+    if(Slicer_USE_QtTesting AND NOT Slicer_USE_SYSTEM_CTK)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallQtTesting.cmake)
+    endif()
+    if(NOT Slicer_USE_SYSTEM_LibArchive)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallLibArchive.cmake)
+    endif()
+    # XXX Note that installation of OpenMP libraries is available only
+    #     when using msvc compiler.
+    if(NOT DEFINED CMAKE_INSTALL_OPENMP_LIBRARIES)
+      set(CMAKE_INSTALL_OPENMP_LIBRARIES ON)
+    endif()
+    set(CMAKE_INSTALL_SYSTEM_RUNTIME_COMPONENT "RuntimeLibraries")
+    include(InstallRequiredSystemLibraries)
 
-  include(${Slicer_CMAKE_DIR}/SlicerBlockInstallCMakeProjects.cmake)
+    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallCMakeProjects.cmake)
 
-else()
+  else()
 
-  #------------------------------------------------------------------------------
-  # macOS specific configuration used by the "fix-up" script
-  #------------------------------------------------------------------------------
-  if(Slicer_USE_PYTHONQT)
-    include(${Slicer_CMAKE_DIR}/SlicerBlockInstallExternalPythonModules.cmake)
-  endif()
+    #------------------------------------------------------------------------------
+    # macOS specific configuration used by the "fix-up" script
+    #------------------------------------------------------------------------------
+    if(Slicer_USE_PYTHONQT)
+      include(${Slicer_CMAKE_DIR}/SlicerBlockInstallExternalPythonModules.cmake)
+    endif()
 
-  # Calling find_package will ensure the *_LIBRARY_DIRS expected by the fixup script are set.
-  if(Slicer_BUILD_CLI_SUPPORT)
-    find_package(SlicerExecutionModel REQUIRED)
-  endif()
-  set(VTK_LIBRARY_DIRS "${VTK_DIR}/lib")
-
-  # Get Qt root directory
-  get_property(_filepath TARGET "Qt5::Core" PROPERTY LOCATION_RELEASE)
-  get_filename_component(_dir ${_filepath} PATH)
-  set(qt_root_dir "${_dir}/..")
-
-  #------------------------------------------------------------------------------
-  # <ExtensionName>_FIXUP_BUNDLE_LIBRARY_DIRECTORIES
-  #------------------------------------------------------------------------------
-
-  #
-  # Setting this variable in the CMakeLists.txt of an extension allows to update
-  # the list of directories used by the "fix-up" script to look up libraries
-  # that should be copied into the Slicer package when the extension is bundled.
-  #
-  # To ensure the extension can be bundled, the variable should be set as a CACHE
-  # variable.
-  #
-
-  set(EXTENSION_BUNDLE_FIXUP_LIBRARY_DIRECTORIES)
-  foreach(project ${Slicer_BUNDLED_EXTENSION_NAMES})
-    if(DEFINED ${project}_FIXUP_BUNDLE_LIBRARY_DIRECTORIES)
-      # Exclude system directories.
-      foreach(lib_path IN LISTS ${project}_FIXUP_BUNDLE_LIBRARY_DIRECTORIES)
-        if(lib_path MATCHES "^(/lib|/lib32|/libx32|/lib64|/usr/lib|/usr/lib32|/usr/libx32|/usr/lib64|/usr/X11R6|/usr/bin)"
-            OR lib_path MATCHES "^(/System/Library|/usr/lib)")
-          continue()
-        endif()
-        list(APPEND EXTENSION_BUNDLE_FIXUP_LIBRARY_DIRECTORIES ${lib_path})
-      endforeach()
+    # Calling find_package will ensure the *_LIBRARY_DIRS expected by the fixup script are set.
+    if(Slicer_BUILD_CLI_SUPPORT)
+      find_package(SlicerExecutionModel REQUIRED)
     endif()
-  endforeach()
+    set(VTK_LIBRARY_DIRS "${VTK_DIR}/lib")
+
+    # Get Qt root directory
+    get_property(_filepath TARGET "Qt5::Core" PROPERTY LOCATION_RELEASE)
+    get_filename_component(_dir ${_filepath} PATH)
+    set(qt_root_dir "${_dir}/..")
+
+    #------------------------------------------------------------------------------
+    # <ExtensionName>_FIXUP_BUNDLE_LIBRARY_DIRECTORIES
+    #------------------------------------------------------------------------------
+
+    #
+    # Setting this variable in the CMakeLists.txt of an extension allows to update
+    # the list of directories used by the "fix-up" script to look up libraries
+    # that should be copied into the Slicer package when the extension is bundled.
+    #
+    # To ensure the extension can be bundled, the variable should be set as a CACHE
+    # variable.
+    #
+
+    set(EXTENSION_BUNDLE_FIXUP_LIBRARY_DIRECTORIES)
+    foreach(project ${Slicer_BUNDLED_EXTENSION_NAMES})
+      if(DEFINED ${project}_FIXUP_BUNDLE_LIBRARY_DIRECTORIES)
+        # Exclude system directories.
+        foreach(lib_path IN LISTS ${project}_FIXUP_BUNDLE_LIBRARY_DIRECTORIES)
+          if(lib_path MATCHES "^(/lib|/lib32|/libx32|/lib64|/usr/lib|/usr/lib32|/usr/libx32|/usr/lib64|/usr/X11R6|/usr/bin)"
+              OR lib_path MATCHES "^(/System/Library|/usr/lib)")
+            continue()
+          endif()
+          list(APPEND EXTENSION_BUNDLE_FIXUP_LIBRARY_DIRECTORIES ${lib_path})
+        endforeach()
+      endif()
+    endforeach()
 
-  #------------------------------------------------------------------------------
-  # Configure "fix-up" script
-  #------------------------------------------------------------------------------
-  set(fixup_path @rpath)
-  set(slicer_cpack_bundle_fixup_directory ${Slicer_BINARY_DIR}/CMake/SlicerCPackBundleFixup)
-  configure_file(
-    "${Slicer_SOURCE_DIR}/CMake/SlicerCPackBundleFixup.cmake.in"
-    "${slicer_cpack_bundle_fixup_directory}/SlicerCPackBundleFixup.cmake"
-    @ONLY)
-  # HACK - For a given directory, "install(SCRIPT ...)" rule will be evaluated first,
-  #        let's make sure the following install rule is evaluated within its own directory.
-  #        Otherwise, the associated script will be executed before any other relevant install rules.
-  file(WRITE ${slicer_cpack_bundle_fixup_directory}/CMakeLists.txt
-    "install(SCRIPT \"${slicer_cpack_bundle_fixup_directory}/SlicerCPackBundleFixup.cmake\" COMPONENT Runtime)")
-  add_subdirectory(${slicer_cpack_bundle_fixup_directory} ${slicer_cpack_bundle_fixup_directory}-binary)
+    #------------------------------------------------------------------------------
+    # Configure "fix-up" script
+    #------------------------------------------------------------------------------
+    set(fixup_path @rpath)
+    set(slicer_cpack_bundle_fixup_directory ${Slicer_BINARY_DIR}/CMake/SlicerCPackBundleFixup)
+    configure_file(
+      "${Slicer_SOURCE_DIR}/CMake/SlicerCPackBundleFixup.cmake.in"
+      "${slicer_cpack_bundle_fixup_directory}/SlicerCPackBundleFixup.cmake"
+      @ONLY)
+    # HACK - For a given directory, "install(SCRIPT ...)" rule will be evaluated first,
+    #        let's make sure the following install rule is evaluated within its own directory.
+    #        Otherwise, the associated script will be executed before any other relevant install rules.
+    file(WRITE ${slicer_cpack_bundle_fixup_directory}/CMakeLists.txt
+      "install(SCRIPT \"${slicer_cpack_bundle_fixup_directory}/SlicerCPackBundleFixup.cmake\" COMPONENT Runtime)")
+    add_subdirectory(${slicer_cpack_bundle_fixup_directory} ${slicer_cpack_bundle_fixup_directory}-binary)
 
-endif()
+  endif()
 
-include(${Slicer_CMAKE_DIR}/SlicerBlockInstallExtensionPackages.cmake)
+  include(${Slicer_CMAKE_DIR}/SlicerBlockInstallExtensionPackages.cmake)
 
-# -------------------------------------------------------------------------
-# Update CPACK_INSTALL_CMAKE_PROJECTS
-# -------------------------------------------------------------------------
+  # -------------------------------------------------------------------------
+  # Update CPACK_INSTALL_CMAKE_PROJECTS
+  # -------------------------------------------------------------------------
 
-# Install additional projects if any, but also do a find_package to load CPACK
-# variables of the Slicer_MAIN_PROJECT if different from SlicerApp
-set(additional_projects ${Slicer_ADDITIONAL_DEPENDENCIES} ${Slicer_ADDITIONAL_PROJECTS})
-foreach(additional_project ${additional_projects})
-  if(NOT Slicer_USE_SYSTEM_${additional_project})
-    find_package(${additional_project} QUIET)
-    if(${additional_project}_FOUND)
-      if(${additional_project}_USE_FILE)
-        include(${${additional_project}_USE_FILE})
-      endif()
-      if(NOT APPLE)
-        if(DEFINED ${additional_project}_CPACK_INSTALL_CMAKE_PROJECTS)
-          set(CPACK_INSTALL_CMAKE_PROJECTS
-            "${CPACK_INSTALL_CMAKE_PROJECTS};${${additional_project}_CPACK_INSTALL_CMAKE_PROJECTS}")
+  # Install additional projects if any, but also do a find_package to load CPACK
+  # variables of the Slicer_MAIN_PROJECT if different from SlicerApp
+  set(additional_projects ${Slicer_ADDITIONAL_DEPENDENCIES} ${Slicer_ADDITIONAL_PROJECTS})
+  foreach(additional_project ${additional_projects})
+    if(NOT Slicer_USE_SYSTEM_${additional_project})
+      find_package(${additional_project} QUIET)
+      if(${additional_project}_FOUND)
+        if(${additional_project}_USE_FILE)
+          include(${${additional_project}_USE_FILE})
+        endif()
+        if(NOT APPLE)
+          if(DEFINED ${additional_project}_CPACK_INSTALL_CMAKE_PROJECTS)
+            set(CPACK_INSTALL_CMAKE_PROJECTS
+              "${CPACK_INSTALL_CMAKE_PROJECTS};${${additional_project}_CPACK_INSTALL_CMAKE_PROJECTS}")
+          endif()
         endif()
       endif()
     endif()
-  endif()
-endforeach()
+  endforeach()
+endif()
 
 # Install Slicer
 set(CPACK_INSTALL_CMAKE_PROJECTS "${CPACK_INSTALL_CMAKE_PROJECTS};${Slicer_BINARY_DIR};Slicer;RuntimeLibraries;/")
-- 
2.49.0

