From 02ddeaff44292c3c9118f78bf227802f37f6aaec Mon Sep 17 00:00:00 2001
From: Rafael Palomar <rafael.palomar@ous-research.no>
Date: Tue, 6 May 2025 19:01:32 +0200
Subject: [PATCH 1/2] COMP: Fix path for SlicerConfig.cmake and
 SlicerConfigVersion.cmake

---
 CMake/SlicerInstallConfig.cmake.in     | 79 ++++++++++++++++++--------
 CMake/SlicerMacroBuildModuleMRML.cmake |  4 +-
 CMake/UseSlicer.cmake.in               | 19 ++++++-
 CMakeLists.txt                         | 55 ++++++++++++------
 SuperBuild/External_VTK.cmake          |  2 +-
 5 files changed, 113 insertions(+), 46 deletions(-)

diff --git a/CMake/SlicerInstallConfig.cmake.in b/CMake/SlicerInstallConfig.cmake.in
index 4d13a50a23..dc9c251818 100644
--- a/CMake/SlicerInstallConfig.cmake.in
+++ b/CMake/SlicerInstallConfig.cmake.in
@@ -39,8 +39,41 @@ get_filename_component(Slicer_CONFIG_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
 set(Slicer_HOME "${Slicer_CONFIG_DIR}/../..")
 get_filename_component(Slicer_HOME ${Slicer_HOME} ABSOLUTE)
 
-# The CMake macros dir.
+# The CMake macros directories.
 set(Slicer_CMAKE_DIR "${Slicer_HOME}/@Slicer_INSTALL_LIB_DIR@/CMake")
+set(CTK_CMAKE_DIR "@CTK_CMAKE_DIR@")
+
+# Set the CMake module path
+list(APPEND CMAKE_MODULE_PATH
+  "${Slicer_CMAKE_DIR}"
+  "${CTK_CMAKE_DIR}"
+  "@vtkAddon_CMAKE_DIR@"
+)
+
+set(Slicer_USE_TBB "@Slicer_USE_TBB@")
+set(Slicer_SUPERBUILD "@Slicer_SUPERBUILD@")
+
+if(NOT Slicer_SUPERBUILD)
+  set(Slicer_REQUIRED_QT_MODULES "@Slicer_REQUIRED_QT_MODULES@")
+  set(Qt5_DIR "@Qt5_DIR@")
+  set(Slicer_VTK_VERSION_MAJOR "@Slicer_VTK_VERSION_MAJOR@")
+  set(Slicer_VTK_VERSION_MINOR "@Slicer_VTK_VERSION_MINOR@")
+  set(Slicer_VTK_COMPONENTS "@Slicer_VTK_COMPONENTS@")
+  set(VTK_DIR "@VTK_DIR@")
+  set(ITK_DIR "@ITK_DIR@")
+  set(HDF5_LIBRARIES "@HDF5_LIBRARIES@")
+  set(HDF5_INCLUDE_DIRS "@HDF5_INCLUDE_DIRS@")
+  set(vtkAddon_DIR "@vtkAddon_DIR@")
+  if(Slicer_USE_TBB)
+    set(TBB_DIR "@TBB_DIR@")
+  endif()
+  set(CTK_DIR "@CTK_DIR@")
+endif()
+
+# Set the Slicer_EXPORT_HEADER_TEMPLATE to the install dir
+set(Slicer_EXPORT_HEADER_TEMPLATE "@Slicer_INSTALL_TEMPLATES_DIR@/qSlicerExport.h.in")
+
+set(Slicer_BUILD_CLI_SUPPORT "@Slicer_BUILD_CLI_SUPPORT@")
 
 # Slicer Libs library directories.
 set(Slicer_Libs_LIBRARY_DIRS
@@ -64,19 +97,17 @@ set(Slicer_Libs_LIBRARY_DIRS
 
 # Slicer Libs include file directories.
 set(Slicer_Libs_INCLUDE_DIRS
-  "${Slicer_HOME}/include/IGT"
-  "${Slicer_HOME}/include/ITKCommandIO"
-  "${Slicer_HOME}/include/LoadableModule"
-  "${Slicer_HOME}/include/MGHImageIO"
-  "${Slicer_HOME}/include/MRML"
-  "${Slicer_HOME}/include/MRMLIDImageIO"
-  "${Slicer_HOME}/include/ModuleDescriptionParser"
-  "${Slicer_HOME}/include/Qdec"
-  "${Slicer_HOME}/include/tclap"
-  "${Slicer_HOME}/include/vtkAddon"
+  "${Slicer_HOME}/include/ITKFactoryRegistration"
+  "${Slicer_HOME}/include/MRMLCore"
+  "${Slicer_HOME}/include/MRMLDisplayableManager"
+  "${Slicer_HOME}/include/MRMLLogic"
+  "${Slicer_HOME}/include/qMRMLWidgets"
+  "${Slicer_HOME}/include/RemoteIO"
   "${Slicer_HOME}/include/vtkITK"
   "${Slicer_HOME}/include/vtkSegmentationCore"
   "${Slicer_HOME}/include/vtkTeem"
+  "${Slicer_HOME}/include/qSlicerBaseQTGUI"
+  "@vtkAddon_INCLUDE_DIRS@"
   )
 
 # Slicer Base library directories.
@@ -119,16 +150,16 @@ endif()
 
 # Components needed to build modules from outside a Slicer build tree or
 # from outside a Slicer installation tree
-set(TCLAP_DIR "${Slicer_HOME}/lib/tclap")
-set(ModuleDescriptionParser_DIR "${Slicer_HOME}/lib/ModuleDescriptionParser")
-set(GenerateCLP_DIR "${Slicer_HOME}/lib/GenerateCLP")
-set(GenerateLM_DIR "${Slicer_HOME}/lib/GenerateLM")
-set(ITK_DIR "${Slicer_HOME}/lib/${ITK_LIB_DIR}")
-set(LoadableModule_DIR "${Slicer_HOME}/lib/LoadableModule")
-set(Teem_DIR "${Slicer_HOME}/lib/Teem-@Teem_VERSION_MAJOR@.@Teem_VERSION_MINOR@.@Teem_VERSION_PATCH@")
-set(VTK_DIR "${Slicer_HOME}/lib/vtk-@VTK_MAJOR_VERSION@.@VTK_MINOR_VERSION@")
-set(PYTHON_INCLUDE_PATH "@PYTHON_INCLUDE_PATH@")
-get_filename_component(PYTHON_LIB_FILE "${PYTHON_LIBRARY}" NAME)
-set(PYTHON_LIBRARIES "${Slicer_HOME}/lib/Python/lib/${PYTHON_LIB_FILE}")
-get_filename_component(PYTHON_INCLUDE_DIR "${PYTHON_INCLUDE_PATH}" NAME)
-set(PYTHON_INCLUDE_PATH "${Slicer_HOME}/lib/Python/include/${PYTHON_INCLUDE_DIR}")
+# set(TCLAP_DIR "${Slicer_HOME}/lib/tclap")
+# set(ModuleDescriptionParser_DIR "${Slicer_HOME}/lib/ModuleDescriptionParser")
+# set(GenerateCLP_DIR "${Slicer_HOME}/lib/GenerateCLP")
+# set(GenerateLM_DIR "${Slicer_HOME}/lib/GenerateLM")
+# set(ITK_DIR "${Slicer_HOME}/lib/${ITK_LIB_DIR}")
+# set(LoadableModule_DIR "${Slicer_HOME}/lib/LoadableModule")
+# set(Teem_DIR "${Slicer_HOME}/lib/Teem-@Teem_VERSION_MAJOR@.@Teem_VERSION_MINOR@.@Teem_VERSION_PATCH@")
+# set(VTK_DIR "${Slicer_HOME}/lib/vtk-@VTK_MAJOR_VERSION@.@VTK_MINOR_VERSION@")
+# set(PYTHON_INCLUDE_PATH "@PYTHON_INCLUDE_PATH@")
+# get_filename_component(PYTHON_LIB_FILE "${PYTHON_LIBRARY}" NAME)
+# set(PYTHON_LIBRARIES "${Slicer_HOME}/lib/Python/lib/${PYTHON_LIB_FILE}")
+# get_filename_component(PYTHON_INCLUDE_DIR "${PYTHON_INCLUDE_PATH}" NAME)
+# set(PYTHON_INCLUDE_PATH "${Slicer_HOME}/lib/Python/include/${PYTHON_INCLUDE_DIR}")
diff --git a/CMake/SlicerMacroBuildModuleMRML.cmake b/CMake/SlicerMacroBuildModuleMRML.cmake
index 061cf2f126..b48552c950 100644
--- a/CMake/SlicerMacroBuildModuleMRML.cmake
+++ b/CMake/SlicerMacroBuildModuleMRML.cmake
@@ -68,7 +68,7 @@ macro(SlicerMacroBuildModuleMRML)
     FOLDER ${MODULEMRML_FOLDER}
     SRCS ${MODULEMRML_SRCS}
     INCLUDE_DIRECTORIES ${MODULEMRML_INCLUDE_DIRECTORIES}
-    TARGET_LIBRARIES ${MODULEMRML_TARGET_LIBRARIES}
+    TARGET_LIBRARIES ${MODULEMRML_TARGET_LIBRARIES} ${VTK_LIBRARIES} ${MRML_LIBRARIES}
     ${MODULEMRML_NO_INSTALL_OPTION}
     )
 
@@ -81,6 +81,8 @@ macro(SlicerMacroBuildModuleMRML)
     ${Slicer_ModuleMRML_INCLUDE_DIRS}
     ${CMAKE_CURRENT_SOURCE_DIR}
     ${CMAKE_CURRENT_BINARY_DIR}
+    ${VTK_INCLUDE_DIRS}
+    ${MRML_INCLUDE_DIRS}
     CACHE INTERNAL "Slicer Module MRML includes" FORCE)
 
   # --------------------------------------------------------------------------
diff --git a/CMake/UseSlicer.cmake.in b/CMake/UseSlicer.cmake.in
index f80bd6884c..63eca84c5e 100644
--- a/CMake/UseSlicer.cmake.in
+++ b/CMake/UseSlicer.cmake.in
@@ -53,6 +53,21 @@ function(_slicer_skip_message text)
   endif()
 endfunction()
 
+# --------------------------------------------------------------------------
+# Finding required packages
+# --------------------------------------------------------------------------
+if(NOT Slicer_SUPERBUILD)
+  find_package(Qt5 COMPONENTS ${Slicer_REQUIRED_QT_MODULES} REQUIRED PATHS ${Qt5_DIR})
+  find_package(VTK ${Slicer_VTK_VERSION_MAJOR} COMPONENTS ${Slicer_VTK_COMPONENTS} REQUIRED PATHS ${VTK_DIR})
+  find_package(ITK REQUIRED PATHS ${ITK_DIR})
+  include(${ITK_USE_FILE})
+  find_package(vtkAddon REQUIRED PATHS ${vtkAddon_DIR})
+  if(Slicer_USE_TBB)
+    find_package(TBB REQUIRED PATHS ${TBB_DIR})
+  endif()
+  find_package(CTK REQUIRED PATHS ${CTK_DIR})
+  include(${CTK_USE_FILE})
+endif()
 # --------------------------------------------------------------------------
 # Setting and checking EXTENSION_NAME
 # --------------------------------------------------------------------------
@@ -293,7 +308,7 @@ if(NOT Slicer_DONT_USE_EXTENSION)
   # Set Slicer_EXTENSION_CMAKE_GENERATOR and EXTENSION_{COMPILER, ARCHITECTURE, BITNESS, OPERATING_SYSTEM}
   #-----------------------------------------------------------------------------
 
-  include(SlicerBlockUploadExtensionPrerequisites)
+  #include(SlicerBlockUploadExtensionPrerequisites)
 endif()
 
 #-----------------------------------------------------------------------------
@@ -409,7 +424,7 @@ if(NOT Slicer_DONT_USE_EXTENSION)
   slicer_setting_variable_message("EXTENSION_BUILD_SUBDIRECTORY" SKIP_TRUNCATE)
 
   #-----------------------------------------------------------------------------
-  include(SlicerExtensionDescriptionSpec)
+  #include(SlicerExtensionDescriptionSpec)
 
   foreach(var IN LISTS Slicer_EXT_OPTIONAL_METADATA_NAMES)
     slicer_setting_variable_message(EXTENSION_${var})
diff --git a/CMakeLists.txt b/CMakeLists.txt
index f7fdc5646c..bf0d4c903c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -50,7 +50,10 @@ endif()
 #-----------------------------------------------------------------------------
 set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake" ${CMAKE_MODULE_PATH})
 set(SUPERBUILD_TOPLEVEL_PROJECT Slicer)
-list(APPEND EXTERNAL_PROJECT_ADDITIONAL_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild)
+
+if(Slicer_SUPERBUILD)
+  list(APPEND EXTERNAL_PROJECT_ADDITIONAL_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild)
+endif()
 include(ExternalProject)
 include(ExternalProjectDependency)
 include(ExternalProjectDependencyForPython)
@@ -61,10 +64,11 @@ if(APPLE)
   # Note: By setting CMAKE_OSX_* variables before any enable_language() or project() calls,
   #       we ensure that the bitness, and C++ standard library will be properly detected.
   include(SlicerInitializeOSXVariables)
+
   mark_as_superbuild(
     VARS CMAKE_OSX_ARCHITECTURES:STRING CMAKE_OSX_SYSROOT:PATH CMAKE_OSX_DEPLOYMENT_TARGET:STRING
     ALL_PROJECTS
-    )
+  )
 
   set(CMAKE_INSTALL_NAME_TOOL "" CACHE FILEPATH "" FORCE)
   # Due to the possibility of external projects (e.g., LibFFI) enabling languages (e.g., ASM)
@@ -111,13 +115,6 @@ option(Slicer_SUPERBUILD "Build ${PROJECT_NAME} and the projects it depends on."
 mark_as_advanced(Slicer_SUPERBUILD)
 set(Slicer_BINARY_INNER_SUBDIR Slicer-build)
 
-#-----------------------------------------------------------------------------
-# Include essential packages in non-superbuild
-#-----------------------------------------------------------------------------
-if(NOT SLICER_SUPERBUILD)
-    find_package(ITK REQUIRED)
-endif()
-
 #-----------------------------------------------------------------------------
 include(CTestUseLaunchers OPTIONAL)
 if(${CTEST_USE_LAUNCHERS})
@@ -170,6 +167,7 @@ include(SlicerInitializeReleaseType)
 # Set the header template which defines custom export/import macros
 # for shared libraries
 #-----------------------------------------------------------------------------
+set(Slicer_INSTALL_TEMPLATES_DIR "${CMAKE_INSTALL_PREFIX}/${Slicer_SHARE_DIR}/templates")
 set(Slicer_EXPORT_HEADER_TEMPLATE "${Slicer_SOURCE_DIR}/CMake/qSlicerExport.h.in")
 set(Slicer_LOGOS_RESOURCE "${Slicer_SOURCE_DIR}/Resources/qSlicer.qrc")
 
@@ -214,14 +212,15 @@ if(NOT DEFINED Slicer_REQUIRED_QT_VERSION)
   endif()
   set(Slicer_REQUIRED_QT_VERSION ${_required_qt_version} CACHE STRING "Minimum required Qt version" FORCE)
 endif()
-mark_as_superbuild(Slicer_REQUIRED_QT_VERSION)
 
+mark_as_superbuild(Slicer_REQUIRED_QT_VERSION)
 #-----------------------------------------------------------------------------
 # Python requirements
 #-----------------------------------------------------------------------------
 if(NOT DEFINED Slicer_REQUIRED_PYTHON_VERSION)
   set(Slicer_REQUIRED_PYTHON_VERSION "3.9.10")
 endif()
+
 mark_as_superbuild(Slicer_REQUIRED_PYTHON_VERSION)
 
 if(NOT Slicer_REQUIRED_PYTHON_VERSION MATCHES "([0-9]+)\\.([0-9]+)\\.([0-9]+)")
@@ -672,6 +671,7 @@ endif()
       WebChannel
       )
   endif()
+
   # Both "extension manager" and "application update" require qRestApi external
   # project itself depending on Qt's Qml module
   if(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT OR Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)
@@ -891,6 +891,17 @@ endif()
 # This means that moving forward most of the find_package calls listed below
 # will be removed.
 
+#-----------------------------------------------------------------------------
+# Include essential packages in non-superbuild
+#-----------------------------------------------------------------------------
+if(NOT Slicer_SUPERBUILD)
+    find_package(ITK REQUIRED)
+    find_package(vtkAddon REQUIRED)
+    if(Slicer_USE_TBB)
+      find_package(TBB REQUIRED)
+    endif()
+endif()
+
 #-----------------------------------------------------------------------------
 # VTK
 #-----------------------------------------------------------------------------
@@ -1122,7 +1133,7 @@ set(extensions_build_dir "${Slicer_BINARY_DIR}/E")
 # Configure a no-op SlicerConfig and SlicerConfigVersion for bundled projects
 set(Slicer_DIR ${extensions_build_dir})
 configure_file(
-  ${Slicer_SOURCE_DIR}/CMake/SlicerConfig.cmake.in
+  ${Slicer_SOURCE_DIR}/CMake/SlicerInstallConfig.cmake.in
   ${Slicer_DIR}/SlicerConfig.cmake @ONLY)
 
 configure_file(
@@ -1221,12 +1232,12 @@ add_dependencies(MRMLCore SlicerConfigureVersionHeader)
 list(APPEND files vtkSlicerVersionConfigure.h)
 
 if(NOT Slicer_INSTALL_NO_DEVELOPMENT)
-foreach(f ${files})
-  install(
-    FILES ${CMAKE_CURRENT_BINARY_DIR}/${f}
-    DESTINATION ${Slicer_INSTALL_INCLUDE_DIR} COMPONENT Development
+  foreach(f ${files})
+    install(
+      FILES ${CMAKE_CURRENT_BINARY_DIR}/${f}
+      DESTINATION ${Slicer_INSTALL_INCLUDE_DIR} COMPONENT Development
     )
-endforeach()
+  endforeach()
 endif()
 
 #-----------------------------------------------------------------------------
@@ -1277,6 +1288,7 @@ endif()
 # Install CMake modules
 #-----------------------------------------------------------------------------
 if(NOT Slicer_INSTALL_NO_DEVELOPMENT)
+
   file(GLOB cmake_files "${CMAKE_CURRENT_SOURCE_DIR}/CMake/*.cmake")
   install(
     FILES ${cmake_files}
@@ -1285,11 +1297,18 @@ if(NOT Slicer_INSTALL_NO_DEVELOPMENT)
 
   install(FILES
     ${Slicer_BINARY_DIR}/UseSlicer.cmake
-    ${Slicer_BINARY_DIR}/SlicerConfig.cmake
-    ${Slicer_BINARY_DIR}/SlicerConfigVersion.cmake
+    ${extensions_build_dir}/SlicerConfig.cmake
+    ${extensions_build_dir}/SlicerConfigVersion.cmake
     DESTINATION ${Slicer_INSTALL_LIB_DIR}
     COMPONENT Development
     )
+
+  install(FILES
+    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/qSlicerExport.h.in
+    DESTINATION ${Slicer_INSTALL_TEMPLATES_DIR}
+    COMPONENT Development
+    )
+
 endif()
 
 #-----------------------------------------------------------------------------
diff --git a/SuperBuild/External_VTK.cmake b/SuperBuild/External_VTK.cmake
index 375f490983..f7a1aca06c 100644
--- a/SuperBuild/External_VTK.cmake
+++ b/SuperBuild/External_VTK.cmake
@@ -12,7 +12,7 @@ endif()
 
 # Include dependent projects if any
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
-
+message(FATAL_ERROR "pff")
 if(Slicer_USE_SYSTEM_${proj})
   unset(VTK_DIR CACHE)
   unset(VTK_SOURCE_DIR CACHE)
-- 
2.49.0

